const { ApolloServer } = require("@apollo/server");
const { expressMiddleware } = require("@apollo/server/express4");
const {
  ApolloServerPluginDrainHttpServer,
} = require("@apollo/server/plugin/drainHttpServer");
const express = require("express");
const http = require("http");
const cors = require("cors");
const bodyParser = require("body-parser");
const { resolvers } = require("./resolvers");
const { typeDefs } = require("./typeDefs");
const mongoose = require("mongoose");
require("dotenv").config();

const app = express();

const httpServer = http.createServer(app);

const corsOptions = {
  credentials: true,
  origin: ["https://studio.apollographql.com", "http://localhost:3000"],
};

const server = new ApolloServer({
  typeDefs,
  resolvers,
  plugins: [ApolloServerPluginDrainHttpServer({ httpServer })],
});

const startServer = async () => {
  await server.start();
  app.use(
    "/",
    cors(corsOptions),
    bodyParser.json(),
    // expressMiddleware accepts the same arguments:
    // an Apollo Server instance and optional configuration options
    expressMiddleware(server, {
      context: async ({ req }) => {
        console.log("request in server?");
        // console.log("req: ", req);

        return { token: req.headers.token };
      },
    })
  );

  // john
  // f9B9lkTxf8iTcxwF
  await mongoose.connect(
    // replace the below string with the one generated by your mongodb dashboard. I added "cluster0" after mongodb.net/ to be explicit
    `mongodb+srv://john:f9B9lkTxf8iTcxwF@cluster0.5ejbyzy.mongodb.net/cluster0?retryWrites=true&w=majority`,
    {
      useNewUrlParser: true,
    }
  );

  await new Promise((resolve) => httpServer.listen({ port: 4000 }, resolve));
  console.log("started..");
};

startServer();
